apiVersion: kubeflow.org/v2beta1
kind: MPIJob
metadata:
  name: tf-horovod-mnist
spec:
  slotsPerWorker: 1
  sshAuthMountPath: /home/mpiuser/.ssh
  runPolicy:
    cleanPodPolicy: None
  mpiReplicaSpecs:
    Launcher:
      replicas: 1
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: launcher
              image: docker.io/benepstein8/tf-hvd-mpi:v1.2
              imagePullPolicy: Always
              command: ["/bin/bash","-lc"]
              args:
                - |
                  set -euo pipefail
                  # 2 processes total, 1 per worker (slotsPerWorker=1)
                  mpirun -np 2 \
                    --allow-run-as-root \
                    -bind-to none -map-by slot \
                    -x NCCL_DEBUG=INFO -x HOROVOD_LOG_LEVEL=INFO \
                    -x LD_LIBRARY_PATH -x PATH \
                    python /workspace/tf_mnist_hvd.py
              securityContext:
                runAsUser: 10001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
          # optional: nodeSelector / tolerations here
    Worker:
      replicas: 2
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: worker
              image: docker.io/benepstein8/tf-hvd-mpi:v1.2
              imagePullPolicy: Always
              ports:
                - containerPort: 2222
                  name: ssh
              env:
                - name: OMPI_MCA_btl_vader_single_copy_mechanism
                  value: none
              securityContext:
                runAsUser: 10001
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop: ["ALL"]
                  add: ["NET_BIND_SERVICE"]
              command: ["/bin/bash","-lc"]
              args:
                - |
                  set -euo pipefail
                  echo "=== DEBUG: identity ==="
                  id && whoami
                  echo

                  echo "=== DEBUG: listing /home/mpiuser/.ssh ==="
                  ls -la /home/mpiuser/.ssh || true
                  echo

                  echo "=== DEBUG: perms (mode owner:group path) ==="
                  for f in /home/mpiuser/.ssh /home/mpiuser/.ssh/*; do
                    [ -e "$f" ] && stat -c '%A %U:%G %n' "$f" || true
                  done
                  echo

                  echo "=== DEBUG: authorized_keys (first 2 lines) ==="
                  if [ -f /home/mpiuser/.ssh/authorized_keys ]; then
                    head -n 2 /home/mpiuser/.ssh/authorized_keys
                  else
                    echo "authorized_keys missing"
                  fi
                  echo

                  echo "=== DEBUG: id_rsa.pub (public key) ==="
                  if [ -f /home/mpiuser/.ssh/id_rsa.pub ]; then
                    cat /home/mpiuser/.ssh/id_rsa.pub
                  else
                    echo "id_rsa.pub missing"
                  fi
                  echo

                  echo "=== DEBUG: ~/.sshd_config ==="
                  if [ -f /home/mpiuser/.sshd_config ]; then
                    sed -n '1,200p' /home/mpiuser/.sshd_config
                  else
                    echo "~/.sshd_config missing"
                  fi
                  echo

                  echo "=== Starting sshd ==="
                  exec /usr/sbin/sshd -D -e -f /home/mpiuser/.sshd_config
